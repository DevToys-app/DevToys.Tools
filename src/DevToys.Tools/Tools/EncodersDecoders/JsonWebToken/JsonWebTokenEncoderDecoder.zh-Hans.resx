<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JWT编码和解码工具</value>
    <comment>Gui</comment>
  </data>
  <data name="acr" xml:space="preserve">
    <value>“acr”声明为 0 值，指示最终用户的身份验证不符合 ISO/IEC 29115 要求。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="acrs" xml:space="preserve">
    <value>“acrs”声明提供了证明持有者操作授权的 Auth Context ID。Auth Context ID 可在你的应用和服务中触发升级身份验证。 通常与 xms_cc 声明一起使用。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="aio" xml:space="preserve">
    <value>“aio” 声明是由 Microsoft Entra ID 内部使用的声明，用于记录重用令牌。其它资源不应使用此声明。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="alg" xml:space="preserve">
    <value>表明用于令牌签名的算法</value>
    <comment>Claim</comment>
  </data>
  <data name="AlgorithmInvalidEncodeTokenHasDefaultTimeTitle" xml:space="preserve">
    <value>未知令牌算法</value>
    <comment>Error message</comment>
  </data>
  <data name="amr" xml:space="preserve">
    <value>“amr”声明标识令牌的身份验证方法。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="appid" xml:space="preserve">
    <value>“appid”声明使用令牌的客户端的应用程序 ID。 该应用程序可以自身名义或者代表用户进行操作。 应用程序 ID 通常表示应用程序对象，但它还可以表示 Microsoft Entra ID 中的服务主体对象。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="appidacr" xml:space="preserve">
    <value>“appidacr”声明指示客户端的身份验证方法。 对于公共客户端，值为 0。 使用客户端 ID 和客户端密码时，该值为 1。 使用客户端证书进行身份验证时，值为 2。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="aud" xml:space="preserve">
    <value>“aud”（目标受众）声明标识了 JWT 的预定接收者。每个预定处理此 JWT 的主体必须标识为 aud 声明中的其中一个值。当存在 aud 声明时，如果处理该声明的主体没有使用 aud 声明内的其中一个值标识，那么该主体必须拒绝此 AWT。在一般情况下，“aud”值是一个包含大小写敏感字符串的数组，每个字符串都包含一个 StringOrURI 值。在特殊情况下，当 JWT 只有一个目标受众时，“aud” 值可以是一个包含 StringOrURI 值的大小写敏感字符串。受众取值的含义通常特定于各个应用程序。这个声明是可选的。</value>
    <comment>Claim</comment>
  </data>
  <data name="azp" xml:space="preserve">
    <value>“azp”声明是 appid 声明的替代，指示使用令牌的应用程序 ID。 该应用程序可以自身名义或者代表用户进行操作。 应用程序 ID 通常表示应用程序对象，但它还可以表示 Microsoft Entra ID 中的服务主体对象。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="azpacr" xml:space="preserve">
    <value>“azpacr”声明是 appidacr 声明的替代，指示客户端的身份验证方法。 对于公共客户端，值为 0。 使用客户端 ID 和客户端密码时，该值为 1。 使用客户端证书进行身份验证时，值为 2。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="ClaimDescriptionTitle" xml:space="preserve">
    <value>描述</value>
    <comment>Gui</comment>
  </data>
  <data name="ClaimTypeTitle" xml:space="preserve">
    <value>类型</value>
    <comment>Gui</comment>
  </data>
  <data name="ClaimValueTitle" xml:space="preserve">
    <value>值</value>
    <comment>Gui</comment>
  </data>
  <data name="ConfigurationTitle" xml:space="preserve">
    <value>配置</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeMode" xml:space="preserve">
    <value>解码</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenActorsTitle" xml:space="preserve">
    <value>验证参与者</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenAudiencesInputLabel" xml:space="preserve">
    <value>令牌目标受众（用逗号分隔）</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenAudiencesTitle" xml:space="preserve">
    <value>验证目标受众</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuerInputLabel" xml:space="preserve">
    <value>令牌发行者（用逗号分隔）</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuerSigningKeyTitle" xml:space="preserve">
    <value>验证签发者签名密钥</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenIssuerTitle" xml:space="preserve">
    <value>验证签发者</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenLifetimeTitle" xml:space="preserve">
    <value>验证生存期</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenSettingsDescription" xml:space="preserve">
    <value>选择要验证的令牌参数</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenSettingsTitle" xml:space="preserve">
    <value>令牌验证设置</value>
    <comment>Gui</comment>
  </data>
  <data name="DecodeValidateTokenTitle" xml:space="preserve">
    <value>验证令牌</value>
    <comment>Gui</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>编码和解码Json网络令牌 </value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeMode" xml:space="preserve">
    <value>编码</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenAlgorithmTitle" xml:space="preserve">
    <value>令牌哈希算法</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenAudienceInputTitle" xml:space="preserve">
    <value>令牌目标受众（用逗号分隔）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenExpirationDayInputTitle" xml:space="preserve">
    <value>过期前剩余（天）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenExpirationHourInputTitle" xml:space="preserve">
    <value>过期前剩余（小时）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenExpirationMinuteInputTitle" xml:space="preserve">
    <value>过期前剩余（分钟）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenExpirationMonthInputTitle" xml:space="preserve">
    <value>过期前剩余（月）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenExpirationYearInputTitle" xml:space="preserve">
    <value>过期前剩余（年）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenHasAudienceTitle" xml:space="preserve">
    <value>令牌有目标受众</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenHasExpirationTitle" xml:space="preserve">
    <value>令牌有过期时间</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenHasIssuerTitle" xml:space="preserve">
    <value>令牌有发行者</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenIssuerInputTitle" xml:space="preserve">
    <value>令牌发行者（用逗号分隔）</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenSettingsDescription" xml:space="preserve">
    <value>选择令牌参数</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenSettingsTitle" xml:space="preserve">
    <value>设置</value>
    <comment>Gui</comment>
  </data>
  <data name="exp" xml:space="preserve">
    <value>“exp”（到期时间）声明指示了 JWT 超时时间，在到达或超过该时间后，此 JWT 不可再被处理。exp 声明要求本地日期/时间必须早于 exp 声明中的日期/时间。实现方允许添加数分钟的弹性时间，来补偿时钟偏移。声明的值必须是一个 NumericDate 数值。这个声明是可选的。</value>
    <comment>Claim</comment>
  </data>
  <data name="groups" xml:space="preserve">
    <value>“groups”声明指定表示使用者的组成员身份的对象 ID。 应用程序清单的 groupMembershipClaims 属性针对每个应用程序配置组声明。 值为 null 会排除所有组；值为 SecurityGroup 会只包括“Active Directory 安全组”成员身份；值为 All 会包括安全组和 Microsoft 365 通讯组列表。有关将 groups 声明与隐式授权一起使用的详细信息，请参阅 hasgroups 声明。 对于其他流，如果用户所在的组数对于 SAML 超过 150 个，对于 JWT 超过 200 个，则 Microsoft Entra ID 会向声明源添加一个超额声明。 声明源指向包含用户的组列表的 Microsoft Graph 终结点。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="groups:src1" xml:space="preserve">
    <value>在令牌请求对于令牌来说太大时，“groups:src1”声明包括指向用户的完整组列表的链接。 对于 JWT，作为分布式声明；对于 SAML，作为新声明替代 groups 声明。JWT 值示例："groups":"src1""_claim_sources: "src1" : { "endpoint" : "https://graph.microsoft.com/v1.0/users/{userID}/getMemberObjects" }</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="hasgroups" xml:space="preserve">
    <value>如果存在，则始终为 true，指示用户是否至少在一个组中。 如果完整组声明将导致 URI 片段超出 URL 长度限制（当前为 6 个或更多组），则在隐式授权流中用来替代 JWT 的 groups 声明。 指示客户端应当使用 Microsoft Graph API 来确定用户的组 (https://graph.microsoft.com/v1.0/users/{userID}/getMemberObjects)。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="HeaderInputTitle" xml:space="preserve">
    <value>标头</value>
    <comment>Gui</comment>
  </data>
  <data name="iat" xml:space="preserve">
    <value>“iat”（签发时间）声明指出 JWT 签发的时间。此声明可用于确定 JWT 的存在时间。声明的值必须是一个包含 NumericDate 值的数值。此声明的使用不是必须的。</value>
    <comment>Claim</comment>
  </data>
  <data name="idp" xml:space="preserve">
    <value>The "idp" claim records the identity provider that authenticated the subject of the token. This value is identical to the value of the Issuer claim unless the user account isn't in the same tenant as the issuer, such as guests. Use the value of iss if the claim isn't present.</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="InvalidExpiration" xml:space="preserve">
    <value>到期日期无效</value>
    <comment>Error message</comment>
  </data>
  <data name="iss" xml:space="preserve">
    <value>“iss”（签发者）声明表示构造并返回令牌的签发方。应用程序自行决定如何处理此声明。iss 声明的值是区分大小写的 StringOrURI 值。此声明是可选的。</value>
    <comment>Claim</comment>
  </data>
  <data name="jti" xml:space="preserve">
    <value>“jti”（JWT ID）声明提供了 JWT 的唯一标识符。此声明的值必须使用不同对象间重复几率极小的方式生成；如果应用程序使用了多个签发方，签发方之间的雷同情况也必须要排除。jti 声明可用于防止 JWT 重放。 jti 的值是一个大小写区分的字符串。此声明是可选的。</value>
    <comment>Claim</comment>
  </data>
  <data name="kid" xml:space="preserve">
    <value>指定用于验证此令牌的公钥签名的指纹。</value>
    <comment>Claim</comment>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>JWT编码器/解码器</value>
    <comment>Gui</comment>
  </data>
  <data name="name" xml:space="preserve">
    <value>“name”声明提供一个用户可读值，用于标识令牌使用者。 该值取值任选且可变，仅用于显示目的。 若要接收此声明，请使用 profile 范围。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="nbf" xml:space="preserve">
    <value>“nbf”（不早于）声明指示了 JWT 生效时间，在到达或超过该时间之前，此 JWT 不可被处理。nbf 声明要求本地日期/时间必须晚于 exp 声明中的日期/时间。实现方允许添加数分钟的弹性时间，来补偿时钟偏移。声明的值必须是一个 NumericDate 数值。这个声明是可选的。</value>
    <comment>Claim</comment>
  </data>
  <data name="No" xml:space="preserve">
    <value>否</value>
    <comment>Gui</comment>
  </data>
  <data name="oid" xml:space="preserve">
    <value>请求者的不可变标识符，即用户或服务主体的已验证标识。 此 ID 在应用程序间唯一标识请求者。 同一个用户登录两个不同的应用程序会在 oid 声明中收到相同值。 对 Microsoft 联机服务（例如 Microsoft Graph）发出查询时可以使用 oid。 Microsoft Graph 会返回此 ID 作为给定用户帐户的 id 属性。 因为 oid 允许多个应用程序关联主体，要接收用户的声明，请使用 profile 范围。 如果单个用户存在于多个租户中，该用户会包含每个租户中的不同对象 ID。 即使用户使用相同的凭据登录到每个帐户，帐户也不同。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="PayloadInputTitle" xml:space="preserve">
    <value>载荷</value>
    <comment>Gui</comment>
  </data>
  <data name="preferred_username" xml:space="preserve">
    <value>“preferred_username”声明用于表示用户的主用户名。 该值可以是电子邮件地址、电话号码或未指定格式的通用用户名。 将此值用于用户名提示，在人工可读的 UI 中用作用户名。 若要接收此声明，请使用 profile 范围。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="PrivateKeyNotSupported" xml:space="preserve">
    <value>不支持此私钥类型</value>
    <comment>Error message</comment>
  </data>
  <data name="PublicKeyInputTitle" xml:space="preserve">
    <value>公钥</value>
    <comment>Gui</comment>
  </data>
  <data name="PublicKeyNotSupported" xml:space="preserve">
    <value>不支持此公钥类型</value>
    <comment>Error message</comment>
  </data>
  <data name="rh" xml:space="preserve">
    <value>“rh”声明是 Azure 用来重新验证令牌的内部声明。 资源不应使用此声明。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="roles" xml:space="preserve">
    <value>“roles”声明表示应用程序公开的、请求方应用程序或用户有权调用的权限集。 对于应用程序令牌，客户端凭据流使用此权限集来取代用户范围。 对于用户令牌，此值集包含目标应用程序上分配的用户角色。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="scp" xml:space="preserve">
    <value>“scp”声明表示应用程序公开的、客户端应用程序已请求（和接收）其许可的范围集。 仅为用户令牌包含此值。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>JWT</value>
    <comment>Gui</comment>
  </data>
  <data name="SignatureInputTitle" xml:space="preserve">
    <value>签名</value>
    <comment>Gui</comment>
  </data>
  <data name="sub" xml:space="preserve">
    <value>“sub”（主题）声明指出 JWT 的主题。JWT 中的声明通常是与主题相关的说明。主题的值必须在签发者上下文局部或全局唯一。对此声明的处理一般因应用而异。“sub”值是一个包含 StringOrURI 值的字符串，区分大小写。此声明的使用不是必须的。</value>
    <comment>Claim</comment>
  </data>
  <data name="tid" xml:space="preserve">
    <value>The "tid" claim represents the tenant that the user is signing in to. For work and school accounts, the GUID is the immutable tenant ID of the organization that the user is signing in to.</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="TokenInputTitle" xml:space="preserve">
    <value>令牌</value>
    <comment>Gui</comment>
  </data>
  <data name="TokenNotValidated" xml:space="preserve">
    <value>令牌未验证（未选择参数）</value>
    <comment>Error message</comment>
  </data>
  <data name="ToolModeDescription" xml:space="preserve">
    <value>选择要使用的模式</value>
    <comment>Gui</comment>
  </data>
  <data name="ToolModeTitle" xml:space="preserve">
    <value>工具模式</value>
    <comment>Gui</comment>
  </data>
  <data name="typ" xml:space="preserve">
    <value>指示令牌类型</value>
    <comment>Claim</comment>
  </data>
  <data name="unique_name" xml:space="preserve">
    <value>“unique_name”声明提供一个用户可读值，用于标识令牌使用者。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="uti" xml:space="preserve">
    <value>“uti”（令牌标识符）声明，等效于 JWT 规范中的 jti 声明。 区分大小写的唯一令牌标识符。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="ValidAudiencesEmptyError" xml:space="preserve">
    <value>目标受众为空或无效</value>
    <comment>Error message</comment>
  </data>
  <data name="ValidIssuersEmptyError" xml:space="preserve">
    <value>签发者为空或无效</value>
    <comment>Error message</comment>
  </data>
  <data name="ver" xml:space="preserve">
    <value>“ver”声明表示该访问令牌的版本。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="wids" xml:space="preserve">
    <value>“wids”声明表示分配给此用户的租户级角色，该角色来自 Microsoft Entra 内置角色中显示的角色部分。 应用程序清单的 groupMembershipClaims 属性针对每个应用程序配置此声明。 将声明设置为 All 或 DirectoryRole。 由于令牌长度方面的原因，它在通过隐式流获取的令牌中可能不存在。</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="x5t" xml:space="preserve">
    <value>功能与 kid 声明相同。x5t 是在 v1.0 访问令牌中仅出于兼容目的而发出的旧式声明。</value>
    <comment>Claim</comment>
  </data>
  <data name="xms_cc" xml:space="preserve">
    <value>The "xms_cc" claim indicates whether the client application that acquired the token is capable of handling claims challenges. It's often used along with claim acrs. This claim is commonly used in Conditional Access and Continuous Access Evaluation scenarios. The resource server or service application that the token is issued for controls the presence of this claim in a token. A value of cp1 in the access token is the authoritative way to identify that a client application is capable of handling a claims challenge.</value>
    <comment>Claim (Microsoft)</comment>
  </data>
  <data name="Yes" xml:space="preserve">
    <value>是</value>
    <comment>Gui</comment>
  </data>
  <data name="EncodeTokenHasDefaultTimeTitle" xml:space="preserve">
    <value>令牌有默认时间</value>
    <comment>Gui</comment>
  </data>
  <data name="InvalidHeader" xml:space="preserve">
    <value>无法处理令牌标头</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidPayload" xml:space="preserve">
    <value>无法处理令牌载荷</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidPrivateKey" xml:space="preserve">
    <value>私钥无效或为空</value>
    <comment>Error message</comment>
  </data>
  <data name="InvalidPublicKey" xml:space="preserve">
    <value>公钥无效或为空</value>
    <comment>Error message</comment>
  </data>
  <data name="PrivateKeyInputTitle" xml:space="preserve">
    <value>私钥</value>
    <comment>Gui</comment>
  </data>
  <data name="ValidToken" xml:space="preserve">
    <value>令牌已验证</value>
    <comment>Gui</comment>
  </data>
  <data name="InvalidSignature" xml:space="preserve">
    <value>无法处理令牌签名</value>
    <comment>Error message</comment>
  </data>
  <data name="Base64" xml:space="preserve">
    <value>Base64</value>
    <comment>Gui</comment>
  </data>
  <data name="PlainText" xml:space="preserve">
    <value>纯文本</value>
    <comment>Gui</comment>
  </data>
  <data name="SignatureFormat" xml:space="preserve">
    <value>签名格式</value>
    <comment>Gui</comment>
  </data>
</root>