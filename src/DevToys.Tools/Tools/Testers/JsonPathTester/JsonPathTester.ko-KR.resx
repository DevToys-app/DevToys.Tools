<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JSONPath 테스터 도구</value>
  </data>
  <data name="CheatSheetArraySliceOperator" xml:space="preserve">
    <value>배열 슬라이스 연산자</value>
  </data>
  <data name="CheatSheetBracketNotedChildOperator" xml:space="preserve">
    <value>대괄호로 표기된 자식 또는 자식들</value>
  </data>
  <data name="CheatSheetCurrentObjectElement" xml:space="preserve">
    <value>필터 표현식에 사용됩니다. 추가 처리를 위한 현재 노드를 참조합니다.</value>
  </data>
  <data name="CheatSheetDescription" xml:space="preserve">
    <value>설명</value>
  </data>
  <data name="CheatSheetDotNotedChildOperator" xml:space="preserve">
    <value>점으로 표시된 자식</value>
  </data>
  <data name="CheatSheetFilterExpression" xml:space="preserve">
    <value>지정된 부울 표현식과 일치하는 객체 또는 배열의 모든 요소를 ​​선택합니다. 목록을 반환합니다.</value>
  </data>
  <data name="CheatSheetRecursiveDescent" xml:space="preserve">
    <value>사용 가능한 모든 개체에서 지정된 속성에 대한 심층 스캔을 수행합니다. 단일 일치에 대해서도 항상 목록을 반환합니다.</value>
  </data>
  <data name="CheatSheetRootObjectElement" xml:space="preserve">
    <value>루트 개체 또는 배열입니다.</value>
  </data>
  <data name="CheatSheetScriptExpression" xml:space="preserve">
    <value>스크립트 표현.</value>
  </data>
  <data name="CheatSheetSubscriptOperator" xml:space="preserve">
    <value>배열에서 n번째 요소를 선택합니다. 인덱스는 0부터 시작합니다.</value>
  </data>
  <data name="CheatSheetSyntax" xml:space="preserve">
    <value>구문</value>
  </data>
  <data name="CheatSheetTitle" xml:space="preserve">
    <value>치트 시트</value>
  </data>
  <data name="CheatSheetUnionOperator" xml:space="preserve">
    <value>n1 및 n2 배열 항목을 선택합니다. 목록을 반환합니다.</value>
  </data>
  <data name="CheatSheetWildcard" xml:space="preserve">
    <value>와일드카드. 이름이나 인덱스에 관계없이 객체나 배열의 모든 요소를 ​​선택합니다.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>JSONPath 테스트</value>
  </data>
  <data name="InputFileNotFound" xml:space="preserve">
    <value>선택한 파일이 존재하지 않습니다.</value>
  </data>
  <data name="InputJsonOptionDescription" xml:space="preserve">
    <value>JSON이 포함된 파일의 텍스트 또는 경로</value>
  </data>
  <data name="InputJsonPathOptionDescription" xml:space="preserve">
    <value>JSONPath가 포함된 파일의 텍스트 또는 경로</value>
  </data>
  <data name="InputJsonPathTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="InvalidInputOrFileCommand" xml:space="preserve">
    <value>입력할 텍스트 또는 파일을 지정해 주세요.</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>JSONPath 테스터</value>
  </data>
  <data name="NoMatchFound" xml:space="preserve">
    <value>일치하는 항목이 없습니다.</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>테스트 결과</value>
  </data>
  <data name="OutputFileOptionDescription" xml:space="preserve">
    <value>출력 파일 경로</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>path json</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
</root>