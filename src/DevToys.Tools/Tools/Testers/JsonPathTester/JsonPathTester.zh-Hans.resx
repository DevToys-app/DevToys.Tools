<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>JSONPath 测试工具</value>
  </data>
  <data name="CheatSheetArraySliceOperator" xml:space="preserve">
    <value>数组切片运算符</value>
  </data>
  <data name="CheatSheetBracketNotedChildOperator" xml:space="preserve">
    <value>括号记法引用子元素</value>
  </data>
  <data name="CheatSheetCurrentObjectElement" xml:space="preserve">
    <value>在过滤表达式内使用。指向被过滤的当前节点，以作进一步处理。</value>
  </data>
  <data name="CheatSheetDescription" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="CheatSheetDotNotedChildOperator" xml:space="preserve">
    <value>点记法引用子元素</value>
  </data>
  <data name="CheatSheetFilterExpression" xml:space="preserve">
    <value>在对象或数组内选择所有满足布尔表达式的元素。返回一个列表。</value>
  </data>
  <data name="CheatSheetRecursiveDescent" xml:space="preserve">
    <value>在所有可用对象中深度搜索指定的元素。总是返回一个列表，无论匹配个数。</value>
  </data>
  <data name="CheatSheetRootObjectElement" xml:space="preserve">
    <value>根对象或数组。</value>
  </data>
  <data name="CheatSheetScriptExpression" xml:space="preserve">
    <value>脚本表达式。</value>
  </data>
  <data name="CheatSheetSubscriptOperator" xml:space="preserve">
    <value>从数组中选择第 n 个元素。索引从 0 开始。</value>
  </data>
  <data name="CheatSheetSyntax" xml:space="preserve">
    <value>语法</value>
  </data>
  <data name="CheatSheetTitle" xml:space="preserve">
    <value>速查表</value>
  </data>
  <data name="CheatSheetUnionOperator" xml:space="preserve">
    <value>选择数组中第 n1 和 n2 个元素。返回一个列表。</value>
  </data>
  <data name="CheatSheetWildcard" xml:space="preserve">
    <value>通配符。选择对象或数组中的所有元素，不论其名称或索引。</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>测试 JSONPath</value>
  </data>
  <data name="InputFileNotFound" xml:space="preserve">
    <value>选择的输入文件不存在。</value>
  </data>
  <data name="InputJsonOptionDescription" xml:space="preserve">
    <value>JSON 文本或文件路径</value>
  </data>
  <data name="InputJsonPathOptionDescription" xml:space="preserve">
    <value>JSONPath 文本或文件路径</value>
  </data>
  <data name="InputJsonPathTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
  <data name="InputTitle" xml:space="preserve">
    <value>JSON</value>
  </data>
  <data name="InvalidInputOrFileCommand" xml:space="preserve">
    <value>请指定输入文本或输入文件</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>JSONPath 测试器</value>
  </data>
  <data name="NoMatchFound" xml:space="preserve">
    <value>未找到匹配项</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>测试结果</value>
  </data>
  <data name="OutputFileOptionDescription" xml:space="preserve">
    <value>输出文件路径</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>path json 路径</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>JSONPath</value>
  </data>
</root>