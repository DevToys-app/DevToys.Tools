<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" id="root">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccessibleName" xml:space="preserve">
    <value>Nástroj pro testování regulárních výrazů</value>
  </data>
  <data name="AllMatches" xml:space="preserve">
    <value>Všechny shody</value>
  </data>
  <data name="AllMatchesDescription" xml:space="preserve">
    <value>Najít všechny shody v textu nebo se po první shodě zastavit.</value>
  </data>
  <data name="CheatSheetAlternation" xml:space="preserve">
    <value>Střídání</value>
  </data>
  <data name="CheatSheetAlternationDetails" xml:space="preserve">
    <value>Chová se jako booleanský OR. Dává do shody výraz před nebo za znakem |.
Může fungovat v rámci skupiny nebo na celém výrazu. Vzory budou otestovány v pořadí.</value>
  </data>
  <data name="CheatSheetAnyCharacter" xml:space="preserve">
    <value>Jakýkoliv znak kromě nového řádku</value>
  </data>
  <data name="CheatSheetAnyCharacterDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak kromě nového řádku. Ekvivalentní k [^\n\r].</value>
  </data>
  <data name="CheatSheetAtomicGroup" xml:space="preserve">
    <value>Atomická skupina</value>
  </data>
  <data name="CheatSheetAtomicGroupDetails" xml:space="preserve">
    <value>Nezachycující skupina, která se zbavuje pozic zpětného zachycení po shodě. Například, /(?&gt;ab|a)b/ dá do shody abb, ale ne ab, protože jakmile se možnost ab dá do shody, atomická skupina zabrání zpětnému zachycení k opakovanému pokusu s možností a.</value>
  </data>
  <data name="CheatSheetBeginning" xml:space="preserve">
    <value>Začátek</value>
  </data>
  <data name="CheatSheetBeginningDetails" xml:space="preserve">
    <value>Dává do shody začátek řetězce nebo začátek řádku pokud je víceřádková vlajka (m) aktivována. Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetBeginningOfString" xml:space="preserve">
    <value>Začátek řetězce</value>
  </data>
  <data name="CheatSheetBeginningOfStringDetails" xml:space="preserve">
    <value>Dává do shody začátek řetězce. Na rozdíl od ^ není ovlivněno víceřádkovou vlajkou (m). Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetBell" xml:space="preserve">
    <value>Zvonek</value>
  </data>
  <data name="CheatSheetBellDetails" xml:space="preserve">
    <value>Dává do shody znak ZVONEK (char kód 7).</value>
  </data>
  <data name="CheatSheetBranchResetGroup" xml:space="preserve">
    <value>Skupina resetování větve</value>
  </data>
  <data name="CheatSheetBranchResetGroupDetails" xml:space="preserve">
    <value>Definujte alternativní skupiny, které sdílejí stejná čísla skupin.
Například, v (?|(a)|(b)) obě skupiny (a a b) by byly počítány jako skupina #1.</value>
  </data>
  <data name="CheatSheetCaptureGroup" xml:space="preserve">
    <value>Skupina zachytávaných</value>
  </data>
  <data name="CheatSheetCaptureGroupDetails" xml:space="preserve">
    <value>Vloží výsledky dané skupiny zachytávaných. Například $3 by vložilo třetí skupinu zachytávaných.
Pro tuto funkci existuje více syntaxí:

$1 \1 \{1}</value>
  </data>
  <data name="CheatSheetCapturingGroup" xml:space="preserve">
    <value>Zachytávací skupina</value>
  </data>
  <data name="CheatSheetCapturingGroupDetails" xml:space="preserve">
    <value>Seskupí více tokenů a vytvoří skupinu zachytávaných pro vyjmutí podřetězce nebo používání zpětné reference.</value>
  </data>
  <data name="CheatSheetCarriageReturn" xml:space="preserve">
    <value>Carriage return</value>
  </data>
  <data name="CheatSheetCarriageReturnDetails" xml:space="preserve">
    <value>Dává do shody znak CARRIAGE RETURN (char kód 13).</value>
  </data>
  <data name="CheatSheetCategoryAnchors" xml:space="preserve">
    <value>Ukotvení</value>
  </data>
  <data name="CheatSheetCategoryCharacterClasses" xml:space="preserve">
    <value>Znakové třídy</value>
  </data>
  <data name="CheatSheetCategoryEscapedCharacters" xml:space="preserve">
    <value>Escapované znaky</value>
  </data>
  <data name="CheatSheetCategoryGroupsReferences" xml:space="preserve">
    <value>Skupiny a odkazy</value>
  </data>
  <data name="CheatSheetCategoryLookaround" xml:space="preserve">
    <value>Rozhlédnutí</value>
  </data>
  <data name="CheatSheetCategoryQuantifiersAlternation" xml:space="preserve">
    <value>Kvantifikátory a střídání</value>
  </data>
  <data name="CheatSheetCategorySpecial" xml:space="preserve">
    <value>Speciální</value>
  </data>
  <data name="CheatSheetCategorySubstitution" xml:space="preserve">
    <value>Substituce</value>
  </data>
  <data name="CheatSheetCharacterRange" xml:space="preserve">
    <value>Rozsah znaků</value>
  </data>
  <data name="CheatSheetCharacterRangeDetails" xml:space="preserve">
    <value>Dává do shody znak, jehož char kód je mezi dvěma zadanými znaky včetně.</value>
  </data>
  <data name="CheatSheetCharacterSet" xml:space="preserve">
    <value>Jediný znak A, b nebo c</value>
  </data>
  <data name="CheatSheetCharacterSetDetails" xml:space="preserve">
    <value>Dává do shody buď znak A, b nebo c</value>
  </data>
  <data name="CheatSheetComment" xml:space="preserve">
    <value>Komentář</value>
  </data>
  <data name="CheatSheetCommentDetails" xml:space="preserve">
    <value>Umožňuje vložit komentář do vašeho výrazu, který je při hledání shody ignorován.</value>
  </data>
  <data name="CheatSheetConditional" xml:space="preserve">
    <value>Podmíněné</value>
  </data>
  <data name="CheatSheetConditionalDetails" xml:space="preserve">
    <value>Podmíněně přiřazuje jednu ze dvou možností na základě toho, zda je přiřazena možnost rozhlédnutí. Například /(?(?=a)ab|..)/ dá do shody ab a zx, ale ne ax, protože pokud první znak odpovídá podmínce a, pak vyhodnotí vzor ab. Jako podmínku lze použít libovolné rozhlédnutí. Rozhlédnutí dopředu spustí následnou shodu na začátku podmínky, rozhlédnutí dozadu ji spustí až po ní.</value>
  </data>
  <data name="CheatSheetControlCharacterEscape" xml:space="preserve">
    <value>Řídící znakový escape</value>
  </data>
  <data name="CheatSheetControlCharacterEscapeDetails" xml:space="preserve">
    <value>Escapovaný řídící znak ve tvaru \cZ. Může se pohybovat od \cA (SOH, char kód 1) do \cZ (SUB, char kód 26).</value>
  </data>
  <data name="CheatSheetDefine" xml:space="preserve">
    <value>Definování</value>
  </data>
  <data name="CheatSheetDefineDetails" xml:space="preserve">
    <value>Slouží k definování pojmenovaných skupin pro použití jako podprogramů, aniž by byly zahrnuty do shody. Například /A(?(DEFINE)(?'foo'Z))B\g'foo'/ dá do shody ABZ, protože skupina define je ve shodě ignorována s výjimkou definice podprogramu foo, na který je později odkazováno pomocí \g'foo'.</value>
  </data>
  <data name="CheatSheetDescription" xml:space="preserve">
    <value>Popis</value>
  </data>
  <data name="CheatSheetDigit" xml:space="preserve">
    <value>Číslice</value>
  </data>
  <data name="CheatSheetDigitDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv číslicový znak (0-9). Ekvivalentní k [0-9].</value>
  </data>
  <data name="CheatSheetEnd" xml:space="preserve">
    <value>Konec</value>
  </data>
  <data name="CheatSheetEndDetails" xml:space="preserve">
    <value>Dává do shody konec řetězce nebo konec řádku pokud je víceřádková vlajka (m) aktivována. Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetEndOfString" xml:space="preserve">
    <value>Konec řetězce</value>
  </data>
  <data name="CheatSheetEndOfStringDetails" xml:space="preserve">
    <value>Dává do shody konec řetězce. Na rozdíl od $ není ovlivněno víceřádkovou vlajkou (m). Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetEsc" xml:space="preserve">
    <value>Esc</value>
  </data>
  <data name="CheatSheetEscapedCharacters" xml:space="preserve">
    <value>Escapované znaky</value>
  </data>
  <data name="CheatSheetEscapedCharactersDetails" xml:space="preserve">
    <value>Pro usnadnění jsou tyto escapované znaky podporovány v řetězci Replace v RegExr: \n, \r, \t, \\ a unicode escapy \uFFFF. Může se v prostředí nasazení lišit.</value>
  </data>
  <data name="CheatSheetEscapeSequence" xml:space="preserve">
    <value>Escape sekvence</value>
  </data>
  <data name="CheatSheetEscapeSequenceDetails" xml:space="preserve">
    <value>Všechny znaky mezi \Q a \E jsou interpretovány jako doslovný řetězec. Pokud je \E vynechán, pokračuje až do konce výrazu. Například výraz /\Q(?.)\E/ dá do shody řetězec (?.).</value>
  </data>
  <data name="CheatSheetEscDetails" xml:space="preserve">
    <value>Dává do shody znak ESC (char kód 27).</value>
  </data>
  <data name="CheatSheetFormFeed" xml:space="preserve">
    <value>Form feed</value>
  </data>
  <data name="CheatSheetFormFeedDetails" xml:space="preserve">
    <value>Dává do shody znak FORM FEED (char kód 12).</value>
  </data>
  <data name="CheatSheetGroupConditional" xml:space="preserve">
    <value>Skupinové podmíněné</value>
  </data>
  <data name="CheatSheetGroupConditionalDetails" xml:space="preserve">
    <value>Podmíněně přiřazuje jednu ze dvou možností na základě toho, zda je shoda se skupinou "neuvedeno". Například /(z)?(?(1)a|b)/ dá do shody za, protože první skupina zachytávaných úspěšně dá do shody z, což způsobí, že podmínka dá shody také první možnost a.

Stejný vzor dá do shody i b samo o sobě, protože skupina 1 se neshoduje, takže se místo toho pokusí o shodu s druhou možností b. 

Na skupinu se můžete odkazovat pomocí názvu, čísla nebo relativní pozice (např. -1).</value>
  </data>
  <data name="CheatSheetHexadecimalEscape" xml:space="preserve">
    <value>Šestnáctkový escape</value>
  </data>
  <data name="CheatSheetHexadecimalEscapeDetails" xml:space="preserve">
    <value>Šestnáctkový escapovaný znak ve tvaru \xFF.</value>
  </data>
  <data name="CheatSheetHorizontalWhitespace" xml:space="preserve">
    <value>Vodorovný bílý znak</value>
  </data>
  <data name="CheatSheetHorizontalWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakékoliv vodorovné bílé znaky (mezery, tabulátory).</value>
  </data>
  <data name="CheatSheetKeepOut" xml:space="preserve">
    <value>Nevpouštět</value>
  </data>
  <data name="CheatSheetKeepOutDetails" xml:space="preserve">
    <value>Nevpustit doposud odpovídající text do skupiny výstupových shod, v podstatě shodu do tohoto bodu zahodit. Například /o\Kbar/ dá do shody bar uvnitř řetězce foobar</value>
  </data>
  <data name="CheatSheetLazy" xml:space="preserve">
    <value>Líný</value>
  </data>
  <data name="CheatSheetLazyDetails" xml:space="preserve">
    <value>Udělá předcházející kvantifikátor líným, což způsobí, že dá do shody co nejméně znaků. Ve výchozím nastavení jsou kvantifikátory chamtivé a budou dávat do shody znaků co nejvíce.
Toto chování je obráceno nechamtivou vlajkou/modifikátorem (U).</value>
  </data>
  <data name="CheatSheetLineBreak" xml:space="preserve">
    <value>Konec řádku</value>
  </data>
  <data name="CheatSheetLineBreakDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak konce řádku, včetně dvojice CRLF a CR / LF jednotlivě.</value>
  </data>
  <data name="CheatSheetLineFeed" xml:space="preserve">
    <value>Line feed</value>
  </data>
  <data name="CheatSheetLineFeedDetails" xml:space="preserve">
    <value>Dává do shody znak LINE FEED (char kód 10).</value>
  </data>
  <data name="CheatSheetMatch" xml:space="preserve">
    <value>Dát do shody</value>
  </data>
  <data name="CheatSheetMatchAny" xml:space="preserve">
    <value>Dát do shody jakýkoliv</value>
  </data>
  <data name="CheatSheetMatchAnyDetails" xml:space="preserve">
    <value>Sada znaků, která může dát do shody jakýkoliv znak, včetně konců řádků, kromě vlajky dotall (s).</value>
  </data>
  <data name="CheatSheetMatchDetails" xml:space="preserve">
    <value>Vloží odpovídající text.
Pro tuto funkci je více syntaxí:

$0 \0 \{0}</value>
  </data>
  <data name="CheatSheetModeModifier" xml:space="preserve">
    <value>Modifikátor režimů</value>
  </data>
  <data name="CheatSheetModeModifierDetails" xml:space="preserve">
    <value>Povoluje nebo zakazuje režimy pro zbytek výrazu. Režimy shody se obecně mapují na vlajky výrazu. Například (?i) by pro zbytek výrazu zapnul nerozlišování malých a velkých písmen.
Lze zadat více modifikátorů a všechny modifikátory, které následují za -, jsou zakázány. Například (?im-s) by zapnulo režim necitlivosti velkých a malých písmen a víceřádkové režimy a zakázalo dotall. 

Podporované modifikátory jsou: i - nerozlišování malých a velkých písmen, s - dotall, m - víceřádkový, x - volné řádkování, J - povolit duplicitní jména, U - nechamtivý.</value>
  </data>
  <data name="CheatSheetNamedCapturingGroup" xml:space="preserve">
    <value>Pojmenovaná zachytávací skupina</value>
  </data>
  <data name="CheatSheetNamedCapturingGroupDetails" xml:space="preserve">
    <value>Vytvoří zachytávací skupina, na kterou lze odkazovat pomocí zadaného názvu.
Pro tuto funkci existuje více sytnaxí:

(?'name'ABC) (?P&lt;name&gt;ABC) (?&lt;name&gt;ABC)</value>
  </data>
  <data name="CheatSheetNamedReference" xml:space="preserve">
    <value>Pojmenovaný odkaz</value>
  </data>
  <data name="CheatSheetNamedReferenceDetails" xml:space="preserve">
    <value>Dává do shody výsledky pojmenované skupiny zachytávaných.
Pro tuto funkci existuje více syntaxí:

\k'name' \k&lt;name&gt; \k{name} \g{name} (?P=name)</value>
  </data>
  <data name="CheatSheetNamedSubroutine" xml:space="preserve">
    <value>Pojmenovaná podfunkce</value>
  </data>
  <data name="CheatSheetNamedSubroutineDetails" xml:space="preserve">
    <value>Dává do shody výraz ve skupině zachytávaných. To porovná s odkazem, který odpovídá výsledku.
Pro tuto funkci existuje více syntaxí: \g&lt;name&gt; \g'name' (?&amp;name) (?P&gt;name).</value>
  </data>
  <data name="CheatSheetNegatedCharacterSet" xml:space="preserve">
    <value>Znak kromě A, b nebo c</value>
  </data>
  <data name="CheatSheetNegatedCharacterSetDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není A, b nebo c.</value>
  </data>
  <data name="CheatSheetNegativeLookahead" xml:space="preserve">
    <value>Záporné rozhlédnutí dopředu</value>
  </data>
  <data name="CheatSheetNegativeLookaheadDetails" xml:space="preserve">
    <value>Určuje skupinu, která se nemůže dát do shody po hlavním výrazu (pokud se shoduje, výsledek je zahozen).</value>
  </data>
  <data name="CheatSheetNegativeLookbehind" xml:space="preserve">
    <value>Záporné rozhlédnutí dozadu</value>
  </data>
  <data name="CheatSheetNegativeLookbehindDetails" xml:space="preserve">
    <value>Určuje skupinu, která se nemůže dát do shody před hlavním výrazem (pokud se shoduje, výsledek je zahozen).</value>
  </data>
  <data name="CheatSheetNonCapturingGroup" xml:space="preserve">
    <value>Nezachytávací skupina</value>
  </data>
  <data name="CheatSheetNonCapturingGroupDetails" xml:space="preserve">
    <value>Seskupí více tokenů bez vytvoření skupiny zachytávaných.</value>
  </data>
  <data name="CheatSheetNotDigit" xml:space="preserve">
    <value>Není číslice</value>
  </data>
  <data name="CheatSheetNotDigitDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není číslicový znak (0-9). Ekvivalentní k [^0-9].</value>
  </data>
  <data name="CheatSheetNotHorizontalWhitespace" xml:space="preserve">
    <value>Není vodorovný bílý znak</value>
  </data>
  <data name="CheatSheetNotHorizontalWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není vodorovný bílý znak (mezera, tabulátor).</value>
  </data>
  <data name="CheatSheetNotLineBreak" xml:space="preserve">
    <value>Není konec řádku</value>
  </data>
  <data name="CheatSheetNotLineBreakDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není konec řádku. Podobné tečce (.), ale není ovlivněno vlajkou dotall (s).</value>
  </data>
  <data name="CheatSheetNotUnicodeCategory" xml:space="preserve">
    <value>Není v unicode kategorii</value>
  </data>
  <data name="CheatSheetNotUnicodeCategoryDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není v zadané unicode kategorii.</value>
  </data>
  <data name="CheatSheetNotUnicodeScript" xml:space="preserve">
    <value>Není unicode skript</value>
  </data>
  <data name="CheatSheetNotUnicodeScriptDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není v zadaném unicode skriptu.</value>
  </data>
  <data name="CheatSheetNotVerticalWhitespace" xml:space="preserve">
    <value>Není svislý bílý znak</value>
  </data>
  <data name="CheatSheetNotVerticalWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není svislý bílý znak (konec řádky).</value>
  </data>
  <data name="CheatSheetNotWhitespace" xml:space="preserve">
    <value>Není bílý znak</value>
  </data>
  <data name="CheatSheetNotWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není bílý znak (mezera, tabulátor, konec řádku).</value>
  </data>
  <data name="CheatSheetNotWord" xml:space="preserve">
    <value>Není slovo</value>
  </data>
  <data name="CheatSheetNotWordBoundary" xml:space="preserve">
    <value>Není slovní hranice</value>
  </data>
  <data name="CheatSheetNotWordBoundaryDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není slovní hranice. Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetNotWordDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak, který není slovní znak (alfanumerické &amp; podtržítko). Ekvivalentní k [^A-Za-z0-9_]</value>
  </data>
  <data name="CheatSheetNull" xml:space="preserve">
    <value>Null</value>
  </data>
  <data name="CheatSheetNullDetails" xml:space="preserve">
    <value>Dává do shody znak NULL (char kód 0).</value>
  </data>
  <data name="CheatSheetNumericReference" xml:space="preserve">
    <value>Číselný odkaz</value>
  </data>
  <data name="CheatSheetNumericReferenceDetails" xml:space="preserve">
    <value>Dává do shody výsledky skupiny zachytávaných. Například \1 dává do shody výsledky první skupiny zachytávaných a \3 dává do shody tu třetí.
Pro tuto funkci existuje více syntaxí: \1 \g1 \g{1}.

Posledně zmíněné syntaxe podporují relativní hodnoty, před kterými je znak + nebo -. Například \g-1 by dalo do shody skupinu předcházející odkazu.</value>
  </data>
  <data name="CheatSheetNumericSubroutine" xml:space="preserve">
    <value>Číselná podfunkce</value>
  </data>
  <data name="CheatSheetNumericSubroutineDetails" xml:space="preserve">
    <value>Dává do shody výraz ve skupině zachytávaných. To porovná s odkazem, který odpovídá výsledku. Například /(a|b)\g'1'/ může dát do shody ab, protože výraz a|b je znovu vyhodnocován. 
Pro tuto funkci existuje více syntaxí: \g&lt;1&gt; \g'1' (?1).

Posledně zmíněné syntaxe podporují relativní hodnoty, před kterými je znak + nebo -. Například \g&lt;-1&gt; by dalo do shody skupinu předcházející odkazu.</value>
  </data>
  <data name="CheatSheetOctalEscape" xml:space="preserve">
    <value>Osmičkový escape</value>
  </data>
  <data name="CheatSheetOctalEscapeDetails" xml:space="preserve">
    <value>Osmičkový escapovaný znak ve tvaru \000. Hodnota musí být menší než 255 (\377).
Syntaxe \o{FFF} je také podporována.</value>
  </data>
  <data name="CheatSheetOptional" xml:space="preserve">
    <value>Nepovinné</value>
  </data>
  <data name="CheatSheetOptionalDetails" xml:space="preserve">
    <value>Dává do shody 0 nebo 1 předcházející tokenu, čímž ho fakticky činí nepovinným.</value>
  </data>
  <data name="CheatSheetPlus" xml:space="preserve">
    <value>Plus</value>
  </data>
  <data name="CheatSheetPlusDetails" xml:space="preserve">
    <value>Dává do shody 1 nebo více z předcházejícího tokenu.</value>
  </data>
  <data name="CheatSheetPositiveLookahead" xml:space="preserve">
    <value>Kladné rozhlédnutí dopředu</value>
  </data>
  <data name="CheatSheetPositiveLookaheadDetails" xml:space="preserve">
    <value>Dává do shody skupinu po hlavním výrazu, aniž by byl zahrnut do výsledku.</value>
  </data>
  <data name="CheatSheetPositiveLookbehind" xml:space="preserve">
    <value>Kladné rozhlédnutí dozadu</value>
  </data>
  <data name="CheatSheetPositiveLookbehindDetails" xml:space="preserve">
    <value>Dává do shody skupinu před hlavním výrazem, aniž by byl zahrnut do výsledku.</value>
  </data>
  <data name="CheatSheetPossessive" xml:space="preserve">
    <value>Přivlastňovací</value>
  </data>
  <data name="CheatSheetPossessiveDetails" xml:space="preserve">
    <value>Udělá z předchozího kvantifikátoru přivlastňovací. Bude dávat do shody co nejvíce znaků a neumožní jim shodovat se s následujícími tokeny.
Například /.*a/ by dal do shody aaa, ale /.*+a/ ne, protože opakující tečka by se shodovala a neumožnila, aby se poslední znak dal do shody s a.</value>
  </data>
  <data name="CheatSheetPreviousMatchEnd" xml:space="preserve">
    <value>Předchozí konec shody</value>
  </data>
  <data name="CheatSheetPreviousMatchEndDetails" xml:space="preserve">
    <value>Dává do shody koncovou pozici předchozí shody. Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetQuantifier" xml:space="preserve">
    <value>Kvantifikátor</value>
  </data>
  <data name="CheatSheetQuantifierDetails" xml:space="preserve">
    <value>Dává do shody zadané množství předchozího tokenu. {1,3} dá do shody 1 až 3. {3} dá do shody přesně 3. {3,} dá do shody 3 nebo více.</value>
  </data>
  <data name="CheatSheetRecursion" xml:space="preserve">
    <value>Rekurze</value>
  </data>
  <data name="CheatSheetRecursionDetails" xml:space="preserve">
    <value>Pokusí se znovu dát do shody celý výraz na aktuální pozici.
Například /a(?R)?b/ dá do shody libovolný počet a následovaných stejným počtem z: celý text az nebo aaaazzzz, ale ne azzz.

Pro tuto funkci existuje více syntaxí:

(?R) (?0) \g&lt;0&gt; \g'0'</value>
  </data>
  <data name="CheatSheetReservedCharacters" xml:space="preserve">
    <value>Rezervované znaky</value>
  </data>
  <data name="CheatSheetReservedCharactersDetails" xml:space="preserve">
    <value>Následující znaky mají zvláštní význam a měl by jim předcházet \ (zpětné lomítko), aby reprezentovaly doslovný znak:
+*?^$\.[]{}()|/

Uvnitř znakové sady musí být escapovány pouze \, - a ].</value>
  </data>
  <data name="CheatSheetStar" xml:space="preserve">
    <value>Hvězda</value>
  </data>
  <data name="CheatSheetStarDetails" xml:space="preserve">
    <value>Dává do shody 0 nebo více z předcházejícího tokenu.</value>
  </data>
  <data name="CheatSheetStrictEndOfString" xml:space="preserve">
    <value>Přísný konec řetězce</value>
  </data>
  <data name="CheatSheetStrictEndOfStringDetails" xml:space="preserve">
    <value>Dává do shody konec řetězce. Na rozdíl od $ nebo \Z neumožňuje koncový newline. Není ovlivněno víceřádkovou vlajkou (m). Dává do shody pozici, ne znak.</value>
  </data>
  <data name="CheatSheetSyntax" xml:space="preserve">
    <value>Syntax</value>
  </data>
  <data name="CheatSheetTab" xml:space="preserve">
    <value>Tabulátor</value>
  </data>
  <data name="CheatSheetTabDetails" xml:space="preserve">
    <value>Dává do shody znak TAB (char kód 9).</value>
  </data>
  <data name="CheatSheetTitle" xml:space="preserve">
    <value>Tahák</value>
  </data>
  <data name="CheatSheetUnicodeCategory" xml:space="preserve">
    <value>Unicode kategorie</value>
  </data>
  <data name="CheatSheetUnicodeCategoryDetails" xml:space="preserve">
    <value>Dává do shody znak v zadané unicode kategorii. Například \p{Ll} dá do shody jakékoliv malé písmeno.</value>
  </data>
  <data name="CheatSheetUnicodeEscape" xml:space="preserve">
    <value>Unicode escape</value>
  </data>
  <data name="CheatSheetUnicodeEscapeDetails" xml:space="preserve">
    <value>Unicode escapovaný znak ve tvaru \x{FF}.</value>
  </data>
  <data name="CheatSheetUnicodeGrapheme" xml:space="preserve">
    <value>Unicode grafém</value>
  </data>
  <data name="CheatSheetUnicodeGraphemeDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv unicode grafém (např. znak). To zahrnuje konce řádků (bez ohledu na režim dotallu) a grafém zakódované jako více kódových bodů.</value>
  </data>
  <data name="CheatSheetUnicodeScript" xml:space="preserve">
    <value>Unicode skript</value>
  </data>
  <data name="CheatSheetUnicodeScriptDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv znak v zadaném unicode skript. Například \p{Arabic} dá do shody z arabského skriptu.</value>
  </data>
  <data name="CheatSheetVerticalWhitespace" xml:space="preserve">
    <value>Svislý bílý znak</value>
  </data>
  <data name="CheatSheetVerticalWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv svislý bílý znak (konec řádku).</value>
  </data>
  <data name="CheatSheetWhitespace" xml:space="preserve">
    <value>Bílý znak</value>
  </data>
  <data name="CheatSheetWhitespaceDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv bílý znak (mezera, tabulátor, konec řádku).</value>
  </data>
  <data name="CheatSheetWord" xml:space="preserve">
    <value>Slovo</value>
  </data>
  <data name="CheatSheetWordBoundary" xml:space="preserve">
    <value>Slovní hranice</value>
  </data>
  <data name="CheatSheetWordBoundaryDetails" xml:space="preserve">
    <value>Dává do shody pozici slovní hranice mezi slovním znakem a neslovním znak nebo pozicí (začátek / konec řetězce). Více informací najdete ve třídě slovních znaků (w).</value>
  </data>
  <data name="CheatSheetWordDetails" xml:space="preserve">
    <value>Dává do shody jakýkoliv slovní znak (alfanumerický a podtržítko). Dává do shody pouze nízké ascii znaky (bez akcentů nebo nerománských znaků). Ekvivalentní k [A-Za-z0-9_]</value>
  </data>
  <data name="Configuration" xml:space="preserve">
    <value>Konfigurace</value>
  </data>
  <data name="CultureInvariant" xml:space="preserve">
    <value>Jakákoliv kultura</value>
  </data>
  <data name="CultureInvariantDescription" xml:space="preserve">
    <value>Určuje, zda mají být kulturní rozdíly v jazyce ignorovány.</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Ověřit a otestovat regulární výrazy</value>
  </data>
  <data name="EcmaScript" xml:space="preserve">
    <value>ECMA Script</value>
  </data>
  <data name="EcmaScriptDescription" xml:space="preserve">
    <value>Povolí chování výrazu v souladu s ECMAScriptem. Tuto hodnotu lze použít pouze ve spojení s možnostmi Jakákoliv kultura, Ignorovat velikost písmen a Víceřádkové.</value>
  </data>
  <data name="IgnoreCase" xml:space="preserve">
    <value>Ignorovat velikost písmen</value>
  </data>
  <data name="IgnoreCaseDescription" xml:space="preserve">
    <value>Určuje, zda brát ohled na velikost písmen.</value>
  </data>
  <data name="IgnoreWhitespace" xml:space="preserve">
    <value>Ignorovat bílé znaky</value>
  </data>
  <data name="IgnoreWhitespaceDescription" xml:space="preserve">
    <value>Odstraní ze vzoru neescapované bílé znaky a povolí komentáře označené #. Tato hodnota však neovlivňuje ani neodstraňuje bílé znaky ve třídách znaků, číselných kvantifikátorech nebo tokenech, které označují začátek jednotlivých prvků jazyka regulárních výrazů.</value>
  </data>
  <data name="LongDisplayTitle" xml:space="preserve">
    <value>Tester regulárních výrazů</value>
  </data>
  <data name="MatchGroupPrefix" xml:space="preserve">
    <value>Skupina</value>
  </data>
  <data name="MatchInformation" xml:space="preserve">
    <value>Informace o shodě</value>
  </data>
  <data name="MatchLocation" xml:space="preserve">
    <value>Umístění</value>
  </data>
  <data name="MatchName" xml:space="preserve">
    <value>Název</value>
  </data>
  <data name="MatchNamePrefix" xml:space="preserve">
    <value>Shoda</value>
  </data>
  <data name="MatchValue" xml:space="preserve">
    <value>Hodnota</value>
  </data>
  <data name="Multiline" xml:space="preserve">
    <value>Víceřádkové</value>
  </data>
  <data name="MultilineDescription" xml:space="preserve">
    <value>Změní význam znaků ^ a $ tak, aby dávaly do shody na začátku a na konci libovolného řádku, nikoli pouze na začátku a na konci celého řetězce.</value>
  </data>
  <data name="Options" xml:space="preserve">
    <value>Možnosti</value>
  </data>
  <data name="RegularExpression" xml:space="preserve">
    <value>Regulární výraz</value>
  </data>
  <data name="RightToLeft" xml:space="preserve">
    <value>Zprava doleva</value>
  </data>
  <data name="RightToLeftDescription" xml:space="preserve">
    <value>Specifikuje směr hledání. Místo zleva doprava bude prohledávat zprava doleva.</value>
  </data>
  <data name="SearchKeywords" xml:space="preserve">
    <value>regulární výraz</value>
  </data>
  <data name="ShortDisplayTitle" xml:space="preserve">
    <value>RegEx</value>
  </data>
  <data name="Singleline" xml:space="preserve">
    <value>Jednořádkové</value>
  </data>
  <data name="SinglelineDescription" xml:space="preserve">
    <value>Změní význam tečky (.) tak, aby dávala do shody každý znak (namísto každého znaku kromě \n).</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
</root>